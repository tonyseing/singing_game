------------- EntityJS Gem ----------------------

The EntityJS Gem lets you quickly create HTML5 javascript games.

# Directory Structure

## /assets 
Contains all sounds, images and data files. Place all sounds in the sounds directory
and all the images in the images directory. These directories will be looked at
and an asset array will be created for easy asset loading (see scripts/scenes/load.js)

## /builds

Contains assets and minified code for the game.

## /scripts

Contains javascripts and coffeescripts for the game.


Data files such as xml, json or tmx will be read and automatically compiled into js files.

For example, if I have a directory like /scripts/animations/monster.json.

The file will be turned into this:

re.e('monster.json animation')
.attr(**Animation JSON here**);

Which means you can edit files in different programs and not worry about copying and pasting
the contents.

TMX is a special XML format for a tile map editor.

## /tests

Contains tests for the game. It is good practice to keep this structured exactly the same as the scripts
directory. Tests can also be in coffeescript.

## /tmp

Contains temporary files generated by EntityJS Gem. Usually don't have to touch this.
Might be removed and replaced in the future.

## config.yml

A configuration file in yaml. This can be edited in any text editor.

## play.html

The current game. If its missing files, run 'entityjs r'

# Commands

## create a new entityjs game
entityjs new [project_name] [comps]+

- example
entityjs new alien_shooter

- example with components
entityjs new alien_shooter alien hero lazer

This will create a new game called 'alien_shooter'
with three components, alien, hero, lazer

## create a new component
entityjs comp [component_name]

- example
entityjs comp hero

## build game
entityjs build

Exports game in builds directory

## build game with custom name
entityjs build release1

## refresh sources
entityjs refresh
or
entityjs r

Creates a file called game.debug.js inside /tmp
